// Функция для пересчета px в rem
$fz: 16;
@function rem($size) {
	@return calc($size / $fz) * 1rem;
}
// Применение
// font-size: rem(18);

// ===================================================================================

// Функция перевода пикселей в em (применять для before и after, например для иконок): font-size, margin-right, gap (для flexbox)
// indent - отступ от элемента
// curentSize - текущий размер шрифта этого элемента. Проверить font-size именно этого элемента (иначе унаследует от родителя)!
@function em($indent, $curentSize) {
	@return calc($indent / $curentSize) * 1em;
}
// Применение
// margin-right: em(15, 28);

// ===================================================================================

// Функция для пересчета px в % для line-height
@function lh($lineHeigh, $fontSize) {
	@return calc($lineHeigh / $fontSize) * 100%;
}
// Применение
// line-height: lh(20, 16);

// ===================================================================================

// Функция для расчета процентов
@function percent($value1, $value2) {
	@return calc($value1 / $value2) * 100%;
}
// Применение
// columns-gap: percent(1590, 600);

// ===================================================================================

// Миксин для адаптивного свойства (Пока не работает на медиазапросах!)

// 1-  $property - css-свойство
// 2 - $startValue - размер по макету (межно переопределять медиазапросом)
// 3 - $endValue - минимальный/максимальный размер на $endMediaWidth
// 4 - $type - тип адаптива (1,2,3)
// 5 - $startMediaWidth - медиазапрос стартовой ширины экрана (если не указано, то $containerWidth)
// 6 - $endMediaWidth - медиазапрос конечной ширины экрана (если не указано, то $containerWidth)
// 7 - $keepSize - удерживать размер (если не указано, то конечный размер на $endMediaWidth зафиксируется)

// $containerWidth - ширина сайта
// $minWidth - минимальная ширина сайта (320px)
// $maxWidth - ширина полотна по Макету (для расчета адптива)
// $minMaxWidthType - конечный viewport в зависимости от типа адаптива

@mixin adaptiveValue(
	$property,
	$startValue,
	$endValue,
	$startMediaWidth: $containerWidth,
	$endMediaWidth: $minMaxWidthType,
	$type: $adaptiveType,
	$keepSize: 0
) {
	$addValue: $startValue - $endValue; // разница между стартовым и конечным значениями свойства

	@if $type==1 {
		// 1 - Только если меньше ограничивающего контейнера (или медиа-запроса): $startMediaWidth
		// 1 - В этой формуле размер ориентируется на ограничивающий контейнер (хотя можно применить медиа-запрос) и всегда стремится к минимальному значению вьюпорта (320px)
		// Пример: @include adaptiveValue("column-gap", 15, 5,);
		// Пример: @include adaptiveValue("column-gap", 15, 5, 480);
		// Пример: @include adaptiveValue("column-gap", 15, 5, 992, 480);
		/*
		1) 15 - начальный (максимальный) размер 15px: на ширине $containerWidth (ограничивающий контейнер)
		2) 5 - конечный (минимальный) размер 5px: на ширине $minWidth (320px)
		3) 1 - работает на уменьшение
		4) 480 - @media (max-width: 480px)
		*/

		#{$property}: rem($startValue);

		@media (max-width: rem($startMediaWidth)) {
			#{$property}: calc(
				#{$endValue + px} + #{$addValue} * ((100vw - #{$endMediaWidth + px}) / #{$startMediaWidth - $endMediaWidth})
			);
		}
		// Если нужно удержать конечный размер на конечной ширине экрана
		@if $keepSize==0 {
			@media (max-width: rem($endMediaWidth)) {
				#{$property}: rem($endValue);
			}
		}
	} @else if $type==2 {
		// 2 - Только если больше контейнера (Для mobile first). ОБЯЗЯТЕЛЬНО УКАЗАТЬ КОНЕЧНЫЙ РАЗМЕР ЭКРАНА!
		// 2 - В этой формуле размер ориентируется на любой медиа-запрос и всегда стремится к максимальному значению вьюпорта (по умолчанию ориентируется на ширину полотна/макета). Увеличивается безгранично
		// Пример: @include adaptiveValue("column-gap", 17, 30, 992, 1920); - фиксируется на конечном разрешении (1920)
		// Пример: @include adaptiveValue("column-gap", 17, 30, 992, 1920, 2, 1); - увеличивается бесконечно
		/*
		1) 17 - начальный размер 17px: на ширине 992px - $startMediaWidth (медиа-запрос)
		2) 30 - максимальный размер 30px: на ширине 1920 - $endMediaWidth (полотно макета сайта без ограничений).
		3) 2 - работает на увеличение
		4) 992 - @media (min-width: 992px)
		5) 1920 - ширина для максимального размера (по умолчанию: $maxWidth). Должно быть больше, чем $containerWidth
		*/
		#{$property}: rem($startValue);

		$addValue: $endValue - $startValue; // разница между конечным и стартовым значениями свойства

		@media (min-width: rem($startMediaWidth)) {
			#{$property}: calc(
				#{$startValue + px} + #{$addValue} *
					((100vw - #{$startMediaWidth + px}) / #{$endMediaWidth - $startMediaWidth})
			);
		}
		// Если нужно удержать конечный размер на конечной ширине экрана
		@if $keepSize==0 {
			@media (min-width: rem($endMediaWidth)) {
				#{$property}: rem($endValue);
			}
		}
	} @else if $type==3 {
		// 3 - Всегда (идеально для резиновых сайтов)
		// 3 - В этой формуле размер ориентируется на ширину полотна (макета) и всегда стремится: 1) к минимальному значению вьюпорта (320px), 2) к максимальному значению безгранично
		// Пример: @include adaptiveValue("column-gap", 30, 15);
		/*
		1) 30 - НАЧАЛЬНЫЙ размер 30px: на ширине $maxWidth (полотно макета сайта без ограничений)
		2) 15 - МИНИМАЛЬНЫЙ размер 15px: на ширине $minWidth (320px)
		3) 3 - работает на неограниченное увеличение
		*/
		#{$property}: calc(#{$endValue + px} + #{$addValue} * ((100vw - #{$minWidth + px}) / #{$maxWidth - $minWidth}));
		@media (max-width: rem($minWidth)) {
			#{$property}: rem($endValue);
		}
	}
}
// 1) ((100vw - #{$minWidth + px}) / #{$maxWidth})
// от реальной ширины экрана (100vw) отнимаем минимальную ширину экрана (320px) - получаем оставшуюся часть экрана (рабочая реальная область)
// и делим эту Рабочую Реальную область на полученную ранее Рабочую Изначальную область

// 2) #{$containerWidth - $minWidth}
// разница между шириной контейнера и минимальной шириной экрана (320px) (рабочая изначальная область)
// или
// 2) #{$maxWidth - $minWidth}
// разница между шириной максимальной шириной Макета и минимальной шириной экрана (320px) (рабочая изначальная область)

// 3) #{$addValue} * ...
// умножаем разницу между максимальным и минимальным значениями свойства на деление Реальной рабочей области экрана на Изначальну юабочую область экрана

// 4) #{$endValue + px} + ...
// прибавляем к расчетам минимальное значение свойства

// ===================================================================================
